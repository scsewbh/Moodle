# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MoodleLogin.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import Mood

class Ui_MoodleDownloader(object):
    def setupUi(self, MoodleDownloader):
        MoodleDownloader.setObjectName("MoodleDownloader")
        MoodleDownloader.resize(736, 542)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MoodleDownloader.sizePolicy().hasHeightForWidth())
        MoodleDownloader.setSizePolicy(sizePolicy)
        MoodleDownloader.setMinimumSize(QtCore.QSize(736, 542))
        MoodleDownloader.setMaximumSize(QtCore.QSize(736, 542))
        MoodleDownloader.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MoodleDownloader)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-30, -10, 791, 561))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        #self.frame.hide()
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(120, 40, 541, 341))
        self.label.setStyleSheet("background-image: url(:/Photos/krabss.jpg);")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/Photos/krabss.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(260, 410, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(260, 450, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setText("")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(350, 500, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setCheckable(False)
        self.pushButton.setDefault(False)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.login)


        #-----------------------------------------------------


        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setGeometry(QtCore.QRect(-10, -30, 771, 601))
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame")
        self.frame2.hide()
        self.listWidget = QtWidgets.QListWidget(self.frame2)
        self.listWidget.setGeometry(QtCore.QRect(40, 40, 381, 441))
        self.listWidget.setObjectName("listWidget")
        self.DownloadButton = QtWidgets.QPushButton(self.frame2)
        self.DownloadButton.setGeometry(QtCore.QRect(525, 380, 121, 23))
        self.DownloadButton.setIconSize(QtCore.QSize(16, 16))
        self.DownloadButton.setObjectName("DownloadButton")
        self.DownloadButton.clicked.connect(self.downloadFiles)
        self.progressBar = QtWidgets.QProgressBar(self.frame2)
        self.progressBar.setGeometry(QtCore.QRect(40, 520, 681, 21))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.checkBox = QtWidgets.QCheckBox(self.frame2)
        self.checkBox.setGeometry(QtCore.QRect(430, 40, 70, 17))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.stateChanged.connect(self.CheckAll)
        self.checkBox_2 = QtWidgets.QCheckBox(self.frame2)
        self.checkBox_2.setGeometry(QtCore.QRect(430, 60, 81, 20))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.stateChanged.connect(self.unCheckAll)
        self.lineEdit3 = QtWidgets.QLineEdit(self.frame2)
        self.lineEdit3.setGeometry(QtCore.QRect(470, 320, 231, 23))
        self.lineEdit3.setFrame(True)
        self.lineEdit3.setCursorPosition(0)
        self.lineEdit3.setDragEnabled(False)
        self.lineEdit3.setReadOnly(True)
        self.lineEdit3.setObjectName("lineEdit")
        self.DownloadButton_2 = QtWidgets.QPushButton(self.frame2)
        self.DownloadButton_2.setGeometry(QtCore.QRect(650, 320, 51, 23))
        self.DownloadButton_2.setIconSize(QtCore.QSize(16, 16))
        self.DownloadButton_2.setObjectName("DownloadButton_2")
        self.DownloadButton_2.clicked.connect(self.selectDlLocation)
        self.label = QtWidgets.QLabel(self.frame2)
        self.label.setGeometry(QtCore.QRect(470, 112, 231, 181))
        self.label.setStyleSheet("")
        self.label.setText("")
        self.label.setObjectName("label")
        self.dir_path = 'C:/'

        MoodleDownloader.setCentralWidget(self.centralwidget)

        self.retranslateUi(MoodleDownloader)
        QtCore.QMetaObject.connectSlotsByName(MoodleDownloader)


    def retranslateUi(self, MoodleDownloader):
        _translate = QtCore.QCoreApplication.translate
        MoodleDownloader.setWindowTitle(_translate("MoodleDownloader", "Moodle Downloader"))
        self.lineEdit.setPlaceholderText(_translate("MoodleDownloader", "Username"))
        self.lineEdit_2.setPlaceholderText(_translate("MoodleDownloader", "Password"))
        self.pushButton.setText(_translate("MoodleDownloader", "Login"))
        self.pushButton.setShortcut(_translate("MoodleDownloader", "Return"))
        self.DownloadButton.setText(_translate("MoodleDownloader", "Download Selected"))
        self.checkBox.setText(_translate("MoodleDownloader", "Check All"))
        self.checkBox_2.setText(_translate("MoodleDownloader", "Uncheck All"))
        self.lineEdit3.setText(_translate("MoodleDownloader", "C:/"))
        self.DownloadButton_2.setText(_translate("MoodleDownloader", "Change"))
        

    def login(self):
        self.instant = Mood.Moodle()
        flag = self.instant.login(self.lineEdit.text(), self.lineEdit_2.text())
        if flag:
            self.frame.hide()
            self.frame2.show()
            self.load_courses()
        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Login Failed')
            msg.setText('Moodle has refused your login.\nPlease make sure your information is correct.')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.exec_()


    def load_courses(self):
        self.instant.gatherAllCourses()
        self.numOfCourses = len(self.instant.dictCourseSel)
        for num in range(0, self.numOfCourses):
            if num%2 == 0 or num == 0:
                item = QtWidgets.QListWidgetItem()
                item.setCheckState(QtCore.Qt.Unchecked)
                self.listWidget.addItem(item)
            else:
                item = QtWidgets.QListWidgetItem()
                brush = QtGui.QBrush(QtGui.QColor(216, 216, 216))
                brush.setStyle(QtCore.Qt.SolidPattern)
                item.setBackground(brush)
                brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
                brush.setStyle(QtCore.Qt.NoBrush)
                item.setForeground(brush)
                item.setCheckState(QtCore.Qt.Unchecked)
                self.listWidget.addItem(item)
        _translate = QtCore.QCoreApplication.translate
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)

        count = 0
        for key in self.instant.dictCourseSel:
            item = QtWidgets.QListWidgetItem()
            item.setCheckState(QtCore.Qt.Unchecked)
            item = self.listWidget.item(count)
            item.setText(_translate("MoodleDownloader", key))
            count = count + 1
        self.listWidget.setSortingEnabled(__sortingEnabled)


    def selectDlLocation(self):
        _translate = QtCore.QCoreApplication.translate
        self.dir_path = QtWidgets.QFileDialog.getExistingDirectory(self.frame2,"Choose Directory","C:\\")
        self.lineEdit3.setText(_translate("MoodleDownloader", self.dir_path))

    def CheckAll(self):
        for num in range(0, self.numOfCourses):
            item = self.listWidget.item(num)
            item.setCheckState(QtCore.Qt.Checked)

    def unCheckAll(self):
        for num in range(0, self.numOfCourses):
            item = self.listWidget.item(num)
            item.setCheckState(QtCore.Qt.Unchecked)

    def downloadFiles(self):
        if self.dir_path == 'C:/' or self.dir_path == '':
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('No Directory Path Set')
            msg.setText('Please click "Change" and set your Download Location.')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.exec_()
            return
        self.checkedNumList = []
        for num in range(0, self.numOfCourses):
            item = self.listWidget.item(num)
            if item.checkState() == 2:
                print(item)
                self.checkedNumList.append(num)
        if self.checkedNumList == []:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('No Courses Selected')
            msg.setText('Please check at least one course to Download.')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.exec_()
            return
        self.updated = {}
        for elem in self.checkedNumList:
            x = list(self.instant.dictCourseSel.keys())[elem]
            if x in self.instant.dictCourseSel.keys():
                self.updated[x] = self.instant.dictCourseSel[x]
        updatedLen = len(self.updated)
        for key in self.updated:
            courseData = self.instant.findCourses(str(self.updated[key]))
            x = self.instant.parsingCourseData(courseData, self.dir_path)
            self.instant.downloadFiles(x)
            self.progressBar.setProperty("value", 100/(updatedLen))
            updatedLen = updatedLen - 1
        print('Went Through')


import resources_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MoodleDownloader = QtWidgets.QMainWindow()
    ui = Ui_MoodleDownloader()
    ui.setupUi(MoodleDownloader)
    MoodleDownloader.show()
    sys.exit(app.exec_())
